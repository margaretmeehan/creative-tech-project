{"version":3,"file":"ServiceBot.js","sourceRoot":"","sources":["../src/ServiceBot.ts"],"names":[],"mappings":";;AAAA,2CAAgG;AAChG,uCAAmD;AACnD,qCAAuC;AAEvC,gBAAyD,SAAQ,kBAA4B;IAGzF,YAAY,OAAiB;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,OAAO,GAAG,IAAI,gCAAmB,CAAC;YACnC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB;YACnC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB;SAClD,CAAC;aACG,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;aAC3B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED,SAAS,CACL,OAEkB;QAElB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAI,IAAI,CAAC,WAAW,CAAC,CAAC;QAEvC,MAAM,MAAM,GAAG,sBAAY,EAAE,CAAC;QAE9B,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACtC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,EAAE;YAC7D,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,iBAAiB,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iBAAiB,CACb,SAAyC,EACzC,OAEkB;QAElB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,0EAA0E;IAC1E,oBAAoB,CAChB,SAAyC,EACzC,OAEkB;QAElB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;CACJ;AAlDD,gCAkDC;AAED,uBAAgE,SAAQ,UAA+B;IACnG;QACI,KAAK,CAAC,IAAI,0BAAa,EAAE,CAAC,CAAC;IAC/B,CAAC;CACJ;AAJD,8CAIC","sourcesContent":["import { BotFrameworkAdapter, Storage, MemoryStorage, ConversationReference } from 'botbuilder';\nimport { StateBot, StateContext } from './botbldr';\nimport { createServer } from 'restify';\n\nexport class ServiceBot <Conversation = any, User = any> extends StateBot<Conversation, User> {\n    adapter: BotFrameworkAdapter;\n\n    constructor(storage?: Storage) {\n        super(storage);\n        \n        this.adapter = new BotFrameworkAdapter({\n            appId: process.env.MICROSOFT_APP_ID,\n            appPassword: process.env.MICROSOFT_APP_PASSWORD\n        })\n            .use(this.conversationState)\n            .use(this.userState);\n    }\n\n    onRequest(\n        handler: (\n            context: StateContext<Conversation, User>,\n        ) => Promise<void>\n    ) {\n        this.adapter.use(... this.middlewares);\n\n        const server = createServer();\n\n        server.post('/api/messages', (req, res) => {\n            this.adapter.processRequest(req, res, this.do(handler));\n        });\n\n        server.listen(process.env.port || process.env.PORT || 3978, () => {\n            console.log(`${server.name} listening to ${server.url}`);\n        });\n    }\n\n    startConversation(\n        reference: Partial<ConversationReference>,\n        handler: (\n            appContext: StateContext<Conversation, User>,\n        ) => Promise<void>\n    ): Promise<void> {\n        return this.adapter.startConversation(reference, this.do(handler));\n    }\n\n    // when startConversation moves into Adapter, this can be implemented here\n    continueConversation(\n        reference: Partial<ConversationReference>,\n        handler: (\n            appContext: StateContext<Conversation, User>,\n        ) => Promise<void>\n    ): Promise<void> {\n        return this.adapter.continueConversation(reference, this.do(handler));\n    }\n}\n\nexport class StarterServiceBot <Conversation = any, User = any> extends ServiceBot <Conversation, User> {\n    constructor() {\n        super(new MemoryStorage());\n    }\n}\n"]}
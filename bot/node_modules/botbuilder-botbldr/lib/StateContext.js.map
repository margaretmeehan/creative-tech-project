{"version":3,"file":"StateContext.js","sourceRoot":"","sources":["../src/StateContext.ts"],"names":[],"mappings":";;;;;;;;;;AACA,2CAAsE;AAEtE,kBAA+C,SAAQ,uBAAU;IAC7D,sDAAsD;IACtD,YAAoB,OAAmB;QACnC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAMD,wFAAwF;IACxF,sCAAsC;IACtC,MAAM,CAAO,IAAI,CACb,OAAmB,EACnB,iBAAkD,EAClD,SAA0B;;YAE1B,MAAM,UAAU,GAAG,IAAI,YAAY,CAAqB,OAAO,CAAC,CAAC;YACjE,UAAU,CAAC,iBAAiB,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrE,UAAU,CAAC,SAAS,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrD,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;KAAA;CACJ;AAtBD,oCAsBC","sourcesContent":["\nimport { BotContext, ConversationState, UserState } from 'botbuilder';\n\nexport class StateContext <Conversation, User> extends BotContext {\n    // instead of adding things here, add them in `from()`\n    private constructor(context: BotContext) {\n        super(context);\n    }\n\n    // define the properties and methods to add to BotContext\n    conversationState!: Conversation;\n    userState!: User;\n\n    // \"from\" adds any properties or methods that depend on arguments or async calls or both\n    // think of it as an async constructor\n    static async from <Conversation = any, User = any> (\n        context: BotContext,\n        conversationState: ConversationState<Conversation>,\n        userState: UserState<User>, \n    ) {\n        const appContext = new StateContext<Conversation, User>(context);\n        appContext.conversationState = await conversationState.read(context);\n        appContext.userState = await userState.read(context);\n        return appContext;\n    }\n}\n"]}